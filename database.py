# bot.py
import os
import sys
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
)

# –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ—Ä—Ç–∞ –¥–ª—è —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏—è Render (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç)
try:
    import threading
    import time
    import socket

    def open_and_close_port():
        try:
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.bind(('0.0.0.0', 0))
            port = s.getsockname()[1]
            print(f"INFO:render: Temporarily bound to port {port} to satisfy Render port scan.")
            s.listen(1)
            time.sleep(2)  # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
            s.close()
            print(f"INFO:render: Port {port} closed.")
        except Exception as e:
            print(f"INFO:render: Could not temporarily bind port: {e}")

    port_thread = threading.Thread(target=open_and_close_port, daemon=True)
    port_thread.start()
except Exception as e:
    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å


# --- üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ ---
LOCK_FILE = "bot.lock"

if os.path.exists(LOCK_FILE):
    print("‚ùå –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è.")
    print("–£–¥–∞–ª–∏—Ç–µ —Ñ–∞–π–ª 'bot.lock', –µ—Å–ª–∏ —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –±–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
    sys.exit(1)

# –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
with open(LOCK_FILE, "w", encoding="utf-8") as f:
    f.write(str(os.getpid()))

# –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
import atexit
atexit.register(lambda: os.path.exists(LOCK_FILE) and os.remove(LOCK_FILE))
# ---------------------------------------

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
try:
    from database import (
        init_db,
        save_application,
        get_stats,
        get_all_applications,
        reset_applications,
        delete_application_by_id,
    )
    DATABASE_AVAILABLE = True
except ImportError as e:
    DATABASE_AVAILABLE = False
    logging.warning(f"–ú–æ–¥—É–ª—å database.py –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ ID –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ.get('BOT_TOKEN')
if not BOT_TOKEN:
    logging.error("‚ùå –ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    sys.exit(1)

ADMIN_IDS_STR = os.environ.get('ADMIN_IDS', '')
ADMIN_IDS = [int(x.strip()) for x in ADMIN_IDS_STR.split(',') if x.strip().isdigit()]

# –°–æ—Å—Ç–æ—è–Ω–∏—è
NICKNAME, RANK, NAME, CONTACT, TEAM = range(5)
WAITING_DELETE_ID, CONFIRM_DELETE = range(100, 102)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def initialize_database():
    if DATABASE_AVAILABLE:
        try:
            init_db()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    else:
        logger.info("‚ö†Ô∏è –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∞")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω-–º–µ–Ω—é
def get_admin_menu_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
        [InlineKeyboardButton("üìã –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏", callback_data="list_all")],
        [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="delete_profile")],
        [InlineKeyboardButton("‚ôªÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –≤—Å—ë", callback_data="reset_all")],
    ])

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in ADMIN_IDS:
        reply_markup = get_admin_menu_keyboard()
        await update.message.reply_text("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=reply_markup)
        return ConversationHandler.END

    await update.message.reply_text(
        "üèÜ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Ç—É—Ä–Ω–∏—Ä–∞!\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤:"
    )
    await update.message.reply_text("1. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º –≤ –∏–≥—Ä–µ:")
    return NICKNAME

# === –û–ë–†–ê–ë–û–¢–ö–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò ===
async def nickname(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['nickname'] = update.message.text
    await update.message.reply_text("2. –ö–∞–∫–æ–µ —É –≤–∞—Å –∑–≤–∞–Ω–∏–µ/—Ä–∞–Ω–≥?")
    return RANK

async def rank(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['rank']‚Ä¶