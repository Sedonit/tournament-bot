import os
import sys
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
)

# --- üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ ---
LOCK_FILE = "bot.lock"

if os.path.exists(LOCK_FILE):
    print("‚ùå –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è.")
    print("–£–¥–∞–ª–∏—Ç–µ —Ñ–∞–π–ª 'bot.lock', –µ—Å–ª–∏ —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –±–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
    sys.exit(1)

with open(LOCK_FILE, "w") as f:
    f.write(str(os.getpid()))

import atexit
atexit.register(lambda: os.path.exists(LOCK_FILE) and os.remove(LOCK_FILE))
# ---------------------------------------

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
try:
    from database import (
        init_db,
        save_application,
        get_stats,
        get_all_applications,
        reset_applications,
        delete_application_by_id,
    )
    DATABASE_AVAILABLE = True
except ImportError as e:
    DATABASE_AVAILABLE = False
    logging.warning(f"–ú–æ–¥—É–ª—å database.py –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ ID –∞–¥–º–∏–Ω–æ–≤
BOT_TOKEN = os.environ.get('BOT_TOKEN')
ADMIN_IDS_STR = os.environ.get('ADMIN_IDS', '')
ADMIN_IDS = [int(x.strip()) for x in ADMIN_IDS_STR.split(',') if x.strip().isdigit()]

# –°–æ—Å—Ç–æ—è–Ω–∏—è
NICKNAME, RANK, NAME, CONTACT, TEAM = range(5)
WAITING_DELETE_ID, CONFIRM_DELETE = range(100, 102)  # –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def initialize_database():
    if DATABASE_AVAILABLE:
        try:
            init_db()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    else:
        logger.info("‚ö†Ô∏è –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∞")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in ADMIN_IDS:
        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
            [InlineKeyboardButton("üìã –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏", callback_data="list_all")],
            [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="delete_profile")],
            [InlineKeyboardButton("‚ôªÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –≤—Å—ë", callback_data="reset_all")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=reply_markup)
        return ConversationHandler.END

    await update.message.reply_text(
        "üèÜ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Ç—É—Ä–Ω–∏—Ä–∞!\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤:"
    )
    await update.message.reply_text("1. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º –≤ –∏–≥—Ä–µ:")
    return NICKNAME

# === –û–ë–†–ê–ë–û–¢–ö–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò ===
async def nickname(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['nickname'] = update.message.text
    await update.message.reply_text("2. –ö–∞–∫–æ–µ —É –≤–∞—Å –∑–≤–∞–Ω–∏–µ/—Ä–∞–Ω–≥?")
    return RANK

async def rank(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['rank'] = update.message.text
    await update.message.reply_text("3. –í–∞—à–µ –∏–º—è (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):")
    return NAME

async def name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text
    await update.message.reply_text("4. –°–ø–æ—Å–æ–± —Å–≤—è–∑–∏ (Telegram, Discord –∏ —Ç.–¥.):")
    return CONTACT

async def contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['contact'] = update.message.text
    await update.message.reply_text("5. –ö–æ–º–∞–Ω–¥–∞ (–∏–ª–∏ '–ù–µ—Ç'):")
    return TEAM

async def team(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['team'] = update.message.text
    nickname = context.user_data.get('nickname', '–ù–µ —É–∫–∞–∑–∞–Ω')
    rank = context.user_data.get('rank', '–ù–µ —É–∫–∞–∑–∞–Ω')
    name = context.user_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω')
    contact = context.user_data.get('contact', '–ù–µ —É–∫–∞–∑–∞–Ω')
    team = context.user_data.get('team', '–ù–µ —É–∫–∞–∑–∞–Ω')

    app_id = None
    if DATABASE_AVAILABLE:
        try:
            app_id = save_application(nickname, rank, name, contact, team)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")

    form_text = f"üéÆ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n"
    if app_id:
        form_text += f"ID: #{app_id}\n"
    form_text += (
        f"–ù–∏–∫: {nickname}\n–†–∞–Ω–≥: {rank}\n–ò–º—è: {name}\n"
        f"–°–≤—è–∑—å: {contact}\n–ö–æ–º–∞–Ω–¥–∞: {team}"
    )

    for admin_id in ADMIN_IDS:
        try:
            await context.bot.send_message(chat_id=admin_id, text=form_text)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    response = "‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n"
    if app_id:
        response += f"–í–∞—à ID: #{app_id}\n"
    response += "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
    await update.message.reply_text(response)
    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.')
    return ConversationHandler.END

# === –ö–ù–û–ü–ö–ò –î–õ–Ø –ê–î–ú–ò–ù–û–í ===
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    if user_id not in ADMIN_IDS:
        await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    data = query.data

    if data == "stats":
        if not DATABASE_AVAILABLE:
            await query.edit_message_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
            return
        try:
            total, teams = get_stats()
            message = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n–í—Å–µ–≥–æ: {total}\n"
            if teams:
                message += "–ö–æ–º–∞–Ω–¥—ã:\n"
                for t in teams:
                    message += f"  {t['team']}: {t['count']}\n"
            else:
                message += "–ù–µ—Ç –∫–æ–º–∞–Ω–¥."
            await query.edit_message_text(message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞.")

    elif data == "list_all":
        if not DATABASE_AVAILABLE:
            await query.edit_message_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
            return
        try:
            apps = get_all_applications()
            if not apps:
                await query.edit_message_text("üì≠ –ù–µ—Ç –∑–∞—è–≤–æ–∫.")
                return
            message = "üìã –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n"
            for i, app in enumerate(apps, 1):
                message += f"{i}. {app['nickname']} ({app['rank']})\n"
            await query.edit_message_text(message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∫–∞: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞.")

    elif data == "delete_profile":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
        context.user_data['awaiting_delete_id'] = True
        return WAITING_DELETE_ID

    elif data == "reset_all":
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å—ë", callback_data="confirm_reset")],
            [InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="cancel_action")]
        ]
        await query.edit_message_text("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –∑–∞—è–≤–∫–∏.\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup(keyboard))

# === –£–î–ê–õ–ï–ù–ò–ï –ü–†–û–§–ò–õ–Ø ===
async def waiting_delete_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get('awaiting_delete_id'):
        return ConversationHandler.END

    try:
        profile_num = int(update.message.text.strip())
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return WAITING_DELETE_ID

    try:
        apps = get_all_applications()
        if profile_num < 1 or profile_num > len(apps):
            await update.message.reply_text(f"‚ùå –ù–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è —Å –Ω–æ–º–µ—Ä–æ–º {profile_num}.")
            return WAITING_DELETE_ID

        app = apps[profile_num - 1]
        context.user_data['delete_app_id'] = app['id']
        context.user_data['delete_nickname'] = app['nickname']

        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="confirm_delete")],
            [InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="cancel_action")]
        ]
        await update.message.reply_text(
            f"‚ùì –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å #{profile_num}?\n"
            f"–ù–∏–∫: {app['nickname']}\n"
            f"–†–∞–Ω–≥: {app['rank']}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ—Ñ–∏–ª—è.")
    return CONFIRM_DELETE

async def confirm_delete_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "confirm_delete":
        app_id = context.user_data.get('delete_app_id')
        nickname = context.user_data.get('delete_nickname')
        try:
            deleted = delete_application_by_id(app_id)
            if deleted > 0:
                await query.edit_message_text(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å {nickname} (ID: {app_id}) —É–¥–∞–ª—ë–Ω.")
            else:
                await query.edit_message_text("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.")
    elif query.data == "cancel_action":
        await query.edit_message_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    context.user_data.pop('awaiting_delete_id', None)
    context.user_data.pop('delete_app_id', None)
    context.user_data.pop('delete_nickname', None)
    return ConversationHandler.END

# === –°–ë–†–û–° –í–°–ï–• –ó–ê–Ø–í–û–ö ===
async def confirm_reset_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "confirm_reset":
        try:
            deleted_count = reset_applications()
            await query.edit_message_text(f"‚úÖ –í—Å–µ –∑–∞—è–≤–∫–∏ —É–¥–∞–ª–µ–Ω—ã. –£–¥–∞–ª–µ–Ω–æ: {deleted_count}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ.")
    elif query.data == "cancel_action":
        await query.edit_message_text("‚ùå –°–±—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    initialize_database()

    if not BOT_TOKEN:
        logger.error("‚ùå –ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        sys.exit(1)

    application = Application.builder().token(BOT_TOKEN).build()

    # –î–∏–∞–ª–æ–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            NICKNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, nickname)],
            RANK: [MessageHandler(filters.TEXT & ~filters.COMMAND, rank)],
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, name)],
            CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, contact)],
            TEAM: [MessageHandler(filters.TEXT & ~filters.COMMAND, team)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    # === –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ö–û–ú–ê–ù–î –∏ –ö–û–õ–ë–≠–ö–û–í ===
    application.add_handler(CallbackQueryHandler(button_handler, pattern="^(stats|list_all|delete_profile|reset_all)$"))
    application.add_handler(CallbackQueryHandler(confirm_delete_handler, pattern="^(confirm_delete|cancel_action)$"))
    application.add_handler(CallbackQueryHandler(confirm_reset_handler, pattern="^(confirm_reset|cancel_action)$"))

    # –î–∏–∞–ª–æ–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    application.add_handler(conv_handler)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, waiting_delete_id), group=1)

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()

if __name__ == '__main__':
    main()