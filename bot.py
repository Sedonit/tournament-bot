import os
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ ID –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ.get('8162425911:AAHAoataP_W84txlOp-6h9r66tdQdUr_U4M')
ADMIN_IDS_STR = os.environ.get('951964149', '1862994550')
ADMIN_IDS = [int(x.strip()) for x in ADMIN_IDS_STR.split(',') if x.strip().isdigit()]

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
NICKNAME, RANK, NAME, CONTACT, TEAM = range(5)

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

logger = logging.getLogger(__name__)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in ADMIN_IDS:
        await update.message.reply_text(
            "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫\n"
            "/list - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
        )
        return
    
    await update.message.reply_text(
        "üèÜ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Ç—É—Ä–Ω–∏—Ä–∞!\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤:"
    )
    
    await update.message.reply_text("1. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º –≤ –∏–≥—Ä–µ:")
    return NICKNAME

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∏–∫–Ω–µ–π–º–∞
async def nickname(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['nickname'] = update.message.text
    await update.message.reply_text("2. –ö–∞–∫–æ–µ —É –≤–∞—Å –∑–≤–∞–Ω–∏–µ/—Ä–∞–Ω–≥?")
    return RANK

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–Ω–≥–∞
async def rank(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['rank'] = update.message.text
    await update.message.reply_text("3. –í–∞—à–µ –∏–º—è (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
    return NAME

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏
async def name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text
    await update.message.reply_text("4. –£–∫–∞–∂–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏ (Telegram, Discord, WhatsApp –∏ —Ç.–¥.):")
    return CONTACT

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
async def contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['contact'] = update.message.text
    await update.message.reply_text("5. –ö–æ–º–∞–Ω–¥–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å, –µ—Å–ª–∏ –Ω–µ—Ç - –Ω–∞–ø–∏—à–∏—Ç–µ '–ù–µ—Ç'):")
    return TEAM

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
async def team(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['team'] = update.message.text
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∞–Ω–∫–µ—Ç—É
    nickname = context.user_data.get('nickname', '–ù–µ —É–∫–∞–∑–∞–Ω')
    rank = context.user_data.get('rank', '–ù–µ —É–∫–∞–∑–∞–Ω')
    name = context.user_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω')
    contact = context.user_data.get('contact', '–ù–µ —É–∫–∞–∑–∞–Ω')
    team = context.user_data.get('team', '–ù–µ —É–∫–∞–∑–∞–Ω')
    
    form_text = (
        f"üéÆ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä!\n\n"
        f"–ù–∏–∫–Ω–µ–π–º: {nickname}\n"
        f"–†–∞–Ω–≥: {rank}\n"
        f"–ò–º—è: {name}\n"
        f"–°–≤—è–∑—å: {contact}\n"
        f"–ö–æ–º–∞–Ω–¥–∞: {team}"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
    for admin_id in ADMIN_IDS:
        try:
            await context.bot.send_message(chat_id=admin_id, text=form_text)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
    
    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text(
        "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º —Ç—É—Ä–Ω–∏—Ä–∞.\n"
        "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—á–∞—Å—Ç–∏—è!"
    )
    
    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.')
    return ConversationHandler.END

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    await update.message.reply_text("üìä –ü–æ–∫–∞ —á—Ç–æ —Å—á–µ—Ç—á–∏–∫ –∑–∞—è–≤–æ–∫ —Ö—Ä–∞–Ω–∏—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ –∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ Render.")

async def list_participants(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    await update.message.reply_text("üìã –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ Render.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
def main():
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()

    # –°–æ–∑–¥–∞–µ–º ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            NICKNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, nickname)],
            RANK: [MessageHandler(filters.TEXT & ~filters.COMMAND, rank)],
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, name)],
            CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, contact)],
            TEAM: [MessageHandler(filters.TEXT & ~filters.COMMAND, team)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    application.add_handler(CommandHandler('stats', stats))
    application.add_handler(CommandHandler('list', list_participants))
    
    application.add_handler(conv_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()