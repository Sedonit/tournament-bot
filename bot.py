# bot.py
import os
import sys
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
)

# --- üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ ---
LOCK_FILE = "bot.lock"

if os.path.exists(LOCK_FILE):
    print("‚ùå –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è.")
    print("–£–¥–∞–ª–∏—Ç–µ —Ñ–∞–π–ª 'bot.lock', –µ—Å–ª–∏ —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –±–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
    sys.exit(1)

# –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
with open(LOCK_FILE, "w", encoding="utf-8") as f:
    f.write(str(os.getpid()))

# –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
import atexit
atexit.register(lambda: os.path.exists(LOCK_FILE) and os.remove(LOCK_FILE))
# ---------------------------------------

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
try:
    from database import (
        init_db,
        save_application,
        get_stats,
        get_all_applications,
        reset_applications,
        delete_application_by_id,
        # get_db_connection, # –ù–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –≤–Ω—É—Ç—Ä–∏ database.py
    )
    DATABASE_AVAILABLE = True
except ImportError as e:
    DATABASE_AVAILABLE = False
    logging.warning(f"–ú–æ–¥—É–ª—å database.py –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ ID –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ.get('BOT_TOKEN')
if not BOT_TOKEN:
    logging.error("‚ùå –ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    sys.exit(1)

ADMIN_IDS_STR = os.environ.get('ADMIN_IDS', '')
ADMIN_IDS = [int(x.strip()) for x in ADMIN_IDS_STR.split(',') if x.strip().isdigit()]

# –°–æ—Å—Ç–æ—è–Ω–∏—è
(
    NICKNAME, RANK, NAME, CONTACT, TEAM,
    WAITING_DELETE_ID, CONFIRM_DELETE
) = range(7)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
ITEMS_PER_PAGE = 10

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def initialize_database():
    if DATABASE_AVAILABLE:
        try:
            init_db()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    else:
        logger.info("‚ö†Ô∏è –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∞")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω-–º–µ–Ω—é
def get_admin_menu_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
        [InlineKeyboardButton("üìã –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏", callback_data="list_all_page_1")],
        [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="delete_profile")],
        [InlineKeyboardButton("‚ôªÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –≤—Å—ë", callback_data="reset_all")],
    ])

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in ADMIN_IDS:
        reply_markup = get_admin_menu_keyboard()
        await update.message.reply_text("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=reply_markup)
        return ConversationHandler.END

    await update.message.reply_text(
        "üèÜ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Ç—É—Ä–Ω–∏—Ä–∞!\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤:"
    )
    await update.message.reply_text("1. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º –≤ –∏–≥—Ä–µ:")
    return NICKNAME

# === –û–ë–†–ê–ë–û–¢–ö–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò ===
async def nickname(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['nickname'] = update.message.text
    await update.message.reply_text("2. –ö–∞–∫–æ–µ —É –≤–∞—Å –∑–≤–∞–Ω–∏–µ/—Ä–∞–Ω–≥?")
    return RANK

async def rank(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['rank'] = update.message.text
    await update.message.reply_text("3. –í–∞—à–µ –∏–º—è (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):")
    return NAME

async def name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text
    await update.message.reply_text("4. –°–ø–æ—Å–æ–± —Å–≤—è–∑–∏ (Telegram, Discord –∏ —Ç.–¥.):")
    return CONTACT

async def contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['contact'] = update.message.text
    await update.message.reply_text("5. –ö–æ–º–∞–Ω–¥–∞ (–∏–ª–∏ '–ù–µ—Ç'):")
    return TEAM

async def team(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['team'] = update.message.text
    nickname_val = context.user_data.get('nickname', '–ù–µ —É–∫–∞–∑–∞–Ω')
    rank_val = context.user_data.get('rank', '–ù–µ —É–∫–∞–∑–∞–Ω')
    name_val = context.user_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω')
    contact_val = context.user_data.get('contact', '–ù–µ —É–∫–∞–∑–∞–Ω')
    team_val = context.user_data.get('team', '–ù–µ —É–∫–∞–∑–∞–Ω')

    app_id = None
    if DATABASE_AVAILABLE:
        try:
            app_id = save_application(nickname_val, rank_val, name_val, contact_val, team_val)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")

    form_text = f"üéÆ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n"
    if app_id:
        form_text += f"ID: #{app_id}\n"
    form_text += (
        f"–ù–∏–∫: {nickname_val}\n–†–∞–Ω–≥: {rank_val}\n–ò–º—è: {name_val}\n"
        f"–°–≤—è–∑—å: {contact_val}\n–ö–æ–º–∞–Ω–¥–∞: {team_val}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞–º —Å –∫–Ω–æ–ø–∫–æ–π –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–µ–Ω—é
    keyboard = [
        [InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="back_to_admin_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    for admin_id in ADMIN_IDS:
        try:
            await context.bot.send_message(chat_id=admin_id, text=form_text, reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    # <<< –ò–∑–º–µ–Ω—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    response = "‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n"
    if app_id:
        response += f"–í–∞—à ID: #{app_id}\n"
    response += "–° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∫–æ–Ω—Ç–∞–∫—Ç—É."
    await update.message.reply_text(response)
    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.')
    return ConversationHandler.END

# === –ö–ù–û–ü–ö–ò –î–õ–Ø –ê–î–ú–ò–ù–û–í ===
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback_query —Å data: {query.data}") # <<< –õ–æ–≥ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏

    user_id = query.from_user.id
    if user_id not in ADMIN_IDS:
        await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    data = query.data

    if data == "stats":
        logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ stats") # <<< –õ–æ–≥
        if not DATABASE_AVAILABLE:
            keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", reply_markup=reply_markup)
            return
        try:
            total, teams = get_stats()
            message = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n–í—Å–µ–≥–æ: {total}\n"
            if teams:
                message += "–ö–æ–º–∞–Ω–¥—ã:\n"
                for t in teams:
                    message += f"  {t['team']}: {t['count']}\n"
            else:
                message += "–ù–µ—Ç –∫–æ–º–∞–Ω–¥."
            keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(message, reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", exc_info=True)
            keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞.", reply_markup=reply_markup)

    elif data.startswith("list_all_page_"):
        logger.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ list_all_page –¥–ª—è {data}") # <<< –õ–æ–≥
        if not DATABASE_AVAILABLE:
            logger.warning("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫") # <<< –õ–æ–≥
            keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", reply_markup=reply_markup)
            return
        try:
            page = int(data.split("_")[-1])
            logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {page}") # <<< –õ–æ–≥
            offset = (page - 1) * ITEMS_PER_PAGE

            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            apps = get_all_applications(limit=ITEMS_PER_PAGE, offset=offset)
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(apps)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page}") # <<< –õ–æ–≥

            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
            all_apps_for_count = get_all_applications() # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞
            total_count = len(all_apps_for_count)
            logger.info(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î: {total_count}") # <<< –õ–æ–≥

            if not apps:
                message = "üì≠ –ù–µ—Ç –∑–∞—è–≤–æ–∫."
            else:
                message = f"üìã –£—á–∞—Å—Ç–Ω–∏–∫–∏ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}):\n"
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º ID –∏–∑ –ë–î, –∏–º—è –∏ –∫–æ–Ω—Ç–∞–∫—Ç
                for i, app in enumerate(apps, offset + 1):
                    message += f"{i}. #{app['id']} {app['nickname']} ({app['rank']})\n"
                    name_str = app['name'] if app['name'] else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                    contact_str = app['contact'] if app['contact'] else "–ù–µ —É–∫–∞–∑–∞–Ω"
                    message += f"   –ò–º—è: {name_str}, –ö–æ–Ω—Ç–∞–∫—Ç: {contact_str}\n"

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            navigation_buttons = []
            if page > 1:
                navigation_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"list_all_page_{page - 1}"))
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            if offset + len(apps) < total_count:
                navigation_buttons.append(InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è", callback_data=f"list_all_page_{page + 1}"))

            keyboard = [navigation_buttons, [InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="back_to_admin_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(message, reply_markup=reply_markup)
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ") # <<< –õ–æ–≥
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∫–∞: {e}", exc_info=True)
            keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞.", reply_markup=reply_markup)

    elif data == "delete_profile":
        logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ delete_profile") # <<< –õ–æ–≥
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –Ω–∞ —ç–∫—Ä–∞–Ω –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ (–Ω–æ–º–µ—Ä —Å–ª–µ–≤–∞ –æ—Ç #ID):", reply_markup=reply_markup)
        context.user_data['awaiting_delete_id'] = True
        # –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º WAITING_DELETE_ID, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ CallbackQueryHandler, –Ω–µ ConversationHandler state
        # –ù–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

    elif data == "reset_all":
        logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ reset_all") # <<< –õ–æ–≥
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å—ë", callback_data="confirm_reset")],
            [InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="cancel_action")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –∑–∞—è–≤–∫–∏.\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

    elif data == "back_to_admin_menu":
        logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ back_to_admin_menu") # <<< –õ–æ–≥
        reply_markup = get_admin_menu_keyboard()
        await query.edit_message_text("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=reply_markup)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "‚öôÔ∏è –ê–¥–º–∏–Ω-–º–µ–Ω—é" –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
    elif data == "back_to_admin_menu_from_notification":
        logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ back_to_admin_menu_from_notification") # <<< –õ–æ–≥
        reply_markup = get_admin_menu_keyboard()
        await query.edit_message_text("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=reply_markup)

# === –£–î–ê–õ–ï–ù–ò–ï –ü–†–û–§–ò–õ–Ø ===
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è
async def waiting_delete_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ waiting_delete_id") # <<< –õ–æ–≥
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –≤ button_handler
    if not context.user_data.get('awaiting_delete_id'):
        logger.info("–§–ª–∞–≥ awaiting_delete_id –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ") # <<< –õ–æ–≥
        # –ï—Å–ª–∏ —Ñ–ª–∞–≥ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º.
        # –ú–æ–∂–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É.
        return

    try:
        profile_num = int(update.message.text.strip())
        logger.info(f"–í–≤–µ–¥—ë–Ω –Ω–æ–º–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è: {profile_num}") # <<< –õ–æ–≥
    except ValueError:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤–≤–æ–¥–∞
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.", reply_markup=reply_markup)
        # –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        return

    try:
        # –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Å—å –ø–æ –Ω–æ–º–µ—Ä—É
        apps = get_all_applications()
        logger.info(f"–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞: {len(apps)}") # <<< –õ–æ–≥
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: profile_num –æ—Ç 1 –¥–æ len(apps)
        if profile_num < 1 or profile_num > len(apps):
            logger.info(f"–ù–æ–º–µ—Ä {profile_num} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 1-{len(apps)}") # <<< –õ–æ–≥
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞
            keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(f"‚ùå –ù–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è —Å –Ω–æ–º–µ—Ä–æ–º {profile_num}. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(apps)}.", reply_markup=reply_markup)
            # –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            return

        app = apps[profile_num - 1] # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –ø–æ –ø–æ—Ä—è–¥–∫–æ–≤–æ–º—É –Ω–æ–º–µ—Ä—É
        logger.info(f"–ù–∞–π–¥–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ID={app['id']}, Nickname={app['nickname']}") # <<< –õ–æ–≥
        app_id_to_delete = app['id'] # ID –∑–∞–ø–∏—Å–∏ –≤ –ë–î
        context.user_data['delete_app_id'] = app_id_to_delete
        context.user_data['delete_nickname'] = app['nickname']

        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="confirm_delete")],
            [InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="cancel_action")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            f"‚ùì –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å #{profile_num}?\n"
            f"ID: #{app_id_to_delete}\n"
            f"–ù–∏–∫: {app['nickname']}\n"
            f"–†–∞–Ω–≥: {app['rank']}",
            reply_markup=reply_markup
        )
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å –∂–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
        context.user_data['awaiting_delete_id'] = False
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        return CONFIRM_DELETE
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {e}", exc_info=True)
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –ø—Ä–∏ –æ—à–∏–±–∫–µ
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ—Ñ–∏–ª—è.", reply_markup=reply_markup)
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        context.user_data['awaiting_delete_id'] = False
        return ConversationHandler.END # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è
async def confirm_delete_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    logger.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ confirm_delete_handler —Å data: {query.data}") # <<< –õ–æ–≥

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
    user_id = query.from_user.id
    if user_id not in ADMIN_IDS:
        logger.info("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –∞–¥–º–∏–Ω–æ–º") # <<< –õ–æ–≥
        return

    if query.data == "confirm_delete":
        app_id = context.user_data.get('delete_app_id')
        nickname_val = context.user_data.get('delete_nickname')
        logger.info(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è: ID={app_id}, Nickname={nickname_val}") # <<< –õ–æ–≥
        if not app_id:
             await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: ID –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
             return
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ database.py
            deleted = delete_application_by_id(app_id)
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è: —É–¥–∞–ª–µ–Ω–æ {deleted} –∑–∞–ø–∏—Å–µ–π") # <<< –õ–æ–≥
            if deleted > 0:
                await query.edit_message_text(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å '{nickname_val}' (ID: #{app_id}) —É–¥–∞–ª—ë–Ω.")
            else:
                await query.edit_message_text("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}", exc_info=True)
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.")
    elif query.data in ["cancel_action", "back_to_admin_menu"]:
        logger.info(f"–û—Ç–º–µ–Ω–∞/–Ω–∞–∑–∞–¥ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: action={query.data}") # <<< –õ–æ–≥
        if query.data == "cancel_action":
             await query.edit_message_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ "–ù–∞–∑–∞–¥" –∏–ª–∏ "–û—Ç–º–µ–Ω–∞", –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
        reply_markup = get_admin_menu_keyboard()
        await query.edit_message_text("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=reply_markup)

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    context.user_data.pop('delete_app_id', None)
    context.user_data.pop('delete_nickname', None)
    logger.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω–æ") # <<< –õ–æ–≥
    # –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ConversationHandler.END –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ CallbackQuery
    return ConversationHandler.END

# === –°–ë–†–û–° –í–°–ï–• –ó–ê–Ø–í–û–ö ===
async def confirm_reset_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    logger.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ confirm_reset_handler —Å data: {query.data}") # <<< –õ–æ–≥

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
    user_id = query.from_user.id
    if user_id not in ADMIN_IDS:
        logger.info("–ü–æ–ø—ã—Ç–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–µ –∞–¥–º–∏–Ω–æ–º") # <<< –õ–æ–≥
        return

    if query.data == "confirm_reset":
        logger.info("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞") # <<< –õ–æ–≥
        try:
            deleted_count = reset_applications()
            logger.info(f"–°–±—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω: —É–¥–∞–ª–µ–Ω–æ {deleted_count} –∑–∞–ø–∏—Å–µ–π") # <<< –õ–æ–≥
            await query.edit_message_text(f"‚úÖ –í—Å–µ –∑–∞—è–≤–∫–∏ —É–¥–∞–ª–µ–Ω—ã. –£–¥–∞–ª–µ–Ω–æ: {deleted_count}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞: {e}", exc_info=True)
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ.")
    elif query.data in ["cancel_action", "back_to_admin_menu"]:
        logger.info(f"–û—Ç–º–µ–Ω–∞/–Ω–∞–∑–∞–¥ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ: action={query.data}") # <<< –õ–æ–≥
        if query.data == "cancel_action":
             await query.edit_message_text("‚ùå –°–±—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω.")
        # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ "–ù–∞–∑–∞–¥" –∏–ª–∏ "–û—Ç–º–µ–Ω–∞", –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
        reply_markup = get_admin_menu_keyboard()
        await query.edit_message_text("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=reply_markup)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    initialize_database()

    logger.info("–°–æ–∑–¥–∞–Ω–∏–µ Application...")
    application = Application.builder().token(BOT_TOKEN).build()

    # === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤ (–∫–Ω–æ–ø–æ–∫) –î–û–ë–ê–í–õ–Ø–ï–ú –ü–ï–†–í–´–ú–ò ===
    # –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∫–Ω–æ–ø–æ–∫ –≤–Ω–µ –¥–∏–∞–ª–æ–≥–∞

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫ (–≤–∫–ª—é—á–∞—è –ø–∞–≥–∏–Ω–∞—Ü–∏—é –∏ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥")
    # –î–æ–±–∞–≤–ª–µ–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_handler, pattern="^(stats|list_all_page_|delete_profile|reset_all|back_to_admin_menu|back_to_admin_menu_from_notification)$"))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è –∏ —Å–±—Ä–æ—Å–∞
    application.add_handler(CallbackQueryHandler(confirm_delete_handler, pattern="^(confirm_delete|cancel_action|back_to_admin_menu)$"))
    application.add_handler(CallbackQueryHandler(confirm_reset_handler, pattern="^(confirm_reset|cancel_action|back_to_admin_menu)$"))

    # === –î–∏–∞–ª–æ–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ===
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            NICKNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, nickname)],
            RANK: [MessageHandler(filters.TEXT & ~filters.COMMAND, rank)],
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, name)],
            CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, contact)],
            TEAM: [MessageHandler(filters.TEXT & ~filters.COMMAND, team)],
            # CONFIRM_DELETE —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º CallbackQueryHandler
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    application.add_handler(conv_handler)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    # –û–Ω –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ context.user_data['awaiting_delete_id'] == True
    # –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ (—á—Ç–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤–Ω–µ –¥–∏–∞–ª–æ–≥–∞)
    # –ù–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å ConversationHandler, –∫–æ–≥–¥–∞ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω, –¥–æ–±–∞–≤–∏–º –µ–≥–æ —Å –≥—Ä—É–ø–ø–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞.
    # –ù–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ, —Ç–∞–∫ –∫–∞–∫ –º—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º ConversationHandler –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é,
    # –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –±–µ–∑ –≥—Ä—É–ø–ø—ã, –Ω–æ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å –¥—Ä—É–≥–∏–º–∏ MessageHandler'–∞–º–∏
    # (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –±—ã —É –Ω–∞—Å –±—ã–ª –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞), –¥–æ–±–∞–≤–∏–º —Å –≥—Ä—É–ø–ø–æ–π.
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, waiting_delete_id), group=1)

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()

if __name__ == '__main__':
    main()
